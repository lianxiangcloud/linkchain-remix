{"version":3,"sources":["api/index.js","components/lkconnect/lkconnectSlice.js","components/accounts/AccountsSlice.js","components/deploy/DeploySlice.js","components/lkconnect/Lkconnect.js","components/accounts/Accounts.js","components/contract/Contract.js","components/deploy/Deploy.js","App.js","components/contract/ContractSlice.js","store/index.js","serviceWorker.js","index.js"],"names":["provider","testConnect","endpoint","a","Error","ethers","providers","JsonRpcProvider","listAccounts","accounts","length","ethSendTransaction","tx","send","getTransactionReceipt","txHash","getTransactionReceiptLoop","getContractReceiptTimer","timeout","timer","Promise","resolve","reject","setInterval","clearInterval","then","res","slice","createSlice","name","initialState","isConnect","loading","RPC","errorMsg","reducers","setConnect","state","action","Object","assign","payload","actions","currentAccount","txMeta","gasLimit","value","setAccounts","setCurrentAccount","setTxMeta","compilation","deployInfo","status","contracts","addCompilation","sourceKey","data","source","compiledArray","keys","compiledKey","compiledItem","push","abi","bytecode","evm","object","sources","target","content","setDeployInfo","setContract","address","deleteContract","clearContracts","parseTxParams","params","gas","deployContract","contract","args","dispatch","getState","console","info","deployContractFactory","ContractFactory","deployTx","getDeployTransaction","from","deployTxHash","contractAddress","vmerr","message","useSelector","lkconnect","useDispatch","useEffect","addresses","i","getBalance","balance","toString","disabled","onChange","e","style","margin","onClick","error","type","LoadingOutlined","className","useState","showTxMeta","setShowTxMeta","unit","setUnit","setGasLimit","setValue","ethersUtils","parseUnits","toHexString","hexStripZeros","bigNumberify","AccountOption","account","substr","formatEther","float","marginBottom","DownOutlined","UpOutlined","span","v","width","map","Option","key","CopyOutlined","paddingLeft","copy","gutter","MethodInput","props","onSubmit","showInputs","setShowInputs","inputValues","setInputValues","setLoading","outputRes","setOutputRes","setErrorMsg","getMethodName","handleSubmit","trim","outputs","stateMutability","inputs","placeholder","_","pluck","join","split","input","index","textAlign","values","clone","handleInputChange","output","Contract","showFuncs","setShowFuncs","instance","setInstance","getContractInstance","parseOutput","isArray","cb","functions","call","interface","encode","to","CloseCircleOutlined","filter","el","deploy","selected","setSelected","constructorFunc","setConstructorFunc","atValue","setAtValue","find","selectedItem","compiled","handleDeploy","DeleteOutlined","App","Lkconnect","Accounts","Deploy","configureStore","reducer","lkconnectReducer","accountsReducer","deployReducer","contractReducer","Boolean","window","location","hostname","match","client","createIframeClient","onload","ReactDOM","render","store","document","getElementById","solidity","getCompilationResult","on","fileName","version","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mNAKIA,E,+JAESC,EAAW,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACpBD,EADoB,sBAEjB,IAAIE,MAAM,wBAFO,uBAMvBJ,EAAW,IAAIK,SAAOC,UAAUC,gBAAgBL,GANzB,SAQFF,EAASQ,eARP,aAQnBC,EARmB,QASVC,OAAS,GATC,yCAUdD,GAVc,+DAajB,IAAIL,MAAJ,qCAbiB,0DAAH,sDAiCXO,EAAkB,uCAAG,WAAOC,GAAP,SAAAT,EAAA,+EACzBH,EAASa,KAAK,sBAAuB,CAACD,KADb,2CAAH,sDAIlBE,EAAwB,SAACC,GACpC,OAAOf,EAASa,KAAK,4BAA6B,CAACE,KAGxCC,EAA4B,SAACD,GAA4B,IAChEE,EAD4CC,EAAmB,uDAAT,IAC7BC,EAAQ,EAErC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BL,EAA0BM,aAAY,WAEpC,IADAJ,GAAS,KACGD,EAEV,OADAM,cAAcP,GACPK,EAAO,qCAGhBR,EAAsBC,GAAQU,MAAK,SAAAC,GACjC,GAAIA,EAEF,OADAF,cAAcP,GACPI,EAAQK,QAGlB,SC9DMC,EAAQC,YAAY,CAC/BC,KAAM,YACNC,aAAc,CACZC,WAAW,EACXC,SAAS,EACTC,IAAK,yBACLC,SAAU,IAEZC,SAAU,CACRC,WAAY,SAACC,EAAOC,GAClB,OAAOC,OAAOC,OAAO,GAAIH,EAAOC,EAAOG,aAK9BL,EAAeT,EAAMe,QAArBN,WAoBAT,IAAf,QCnCaA,EAAQC,YAAY,CAC/BC,KAAM,WACNC,aAAc,CACZrB,SAAU,GACVkC,eAAgB,GAChBC,OAAQ,CACNC,SAAU,SACVC,MAAO,QAGXX,SAAU,CACRY,YAAa,SAACV,EAAOC,GACnBD,EAAM5B,SAAW6B,EAAOG,SAE1BO,kBAAmB,SAACX,EAAOC,GACzBD,EAAMM,eAAiBL,EAAOG,SAEhCQ,UAAW,SAACZ,EAAOC,GACjBD,EAAMO,OAASL,OAAOC,OAAO,GAAIH,EAAMO,OAAQN,EAAOG,a,EAKCd,EAAMe,QAApDK,E,EAAAA,YAAaC,E,EAAAA,kBAAmBC,E,EAAAA,UAsBhCtB,IAAf,Q,gBC3CaA,EAAQC,YAAY,CAC/BC,KAAM,SACNC,aAAc,CACZoB,YAAa,GACbC,WAAY,CACVC,OAAQ,GACRlB,SAAU,IAEZmB,UAAW,IAEblB,SAAU,CACRmB,eAAgB,SAACjB,EAAOC,GAAY,IAE9BiB,EAF6B,EACVjB,EAAOG,QAAxBe,EAD2B,EAC3BA,KAAMC,EADqB,EACrBA,OACGC,EAAgB,GAE/B,GAAIF,GAAQA,EAAKH,UAAW,CAC1BE,EAAYhB,OAAOoB,KAAKH,EAAKH,WAAW,GAExC,cAAwBd,OAAOoB,KAAKH,EAAKH,UAAUE,IAAnD,eAAgE,CAA3D,IAAIK,EAAW,KACdC,EAAeL,EAAKH,UAAUE,GAAWK,GAE7CF,EAAcI,KAAK,CACjBjC,KAAM+B,EACNG,IAAKF,EAAaE,IAClBC,SAAUH,EAAaI,IAAID,SAASE,OACpCT,OAAQA,EAAOU,QAAQV,EAAOW,QAAQC,WAI5ChC,EAAMa,YAAcQ,GAEtBY,cAAe,SAACjC,EAAOC,GACrBD,EAAMc,WAAab,EAAOG,SAE5B8B,YAAa,SAAClC,EAAOC,GACnBD,EAAMgB,UAAUf,EAAOG,QAAQ+B,SAAWlC,EAAOG,SAEnDgC,eAAgB,SAACpC,EAAOC,UACfD,EAAMgB,UAAUf,EAAOG,UAEhCiC,eAAgB,SAACrC,GACfA,EAAMgB,UAAY,O,EAKsE1B,EAAMe,QAArFY,E,EAAAA,eAAgBgB,E,EAAAA,cAAeC,E,EAAAA,YAAaE,E,EAAAA,eAAgBC,E,EAAAA,eAE3E,SAASC,EAAc/D,GACrB,IAAIgE,EAAS,GAEb,GAAIhE,EAAGiC,UAAY,EACjB,MAAM,IAAIzC,MAAM,oBAMlB,OAJAwE,EAAOC,IAAMjE,EAAGiC,SACZjC,EAAGkC,OAAqB,QAAZlC,EAAGkC,QACjB8B,EAAO9B,MAAQlC,EAAGkC,OAEb8B,EAGF,IAAME,EAAiB,SAACC,GAAD,IAAWC,EAAX,uDAAgB,GAAhB,8CAAuB,WAAOC,EAAUC,GAAjB,yBAAA/E,EAAA,6DACnDgF,QAAQC,KAAKJ,GACbC,EAASX,EAAc,CAACpC,SAAU,GAAIkB,OAAQ,eAFK,EAGhC8B,KAAbzE,EAH6C,EAG7CA,UAEQkC,gBACZsC,EAASX,EAAc,CAACpC,SAAU,6CAA8CkB,OAAQ,YANvC,SAU7CiC,EAAwB,IAAIhF,SAAOiF,gBAAgBP,EAAShB,IAAKgB,EAASf,UAC1EuB,EAAWF,EAAsBG,qBAAtB,MAAAH,EAAqB,YAAyBL,IAXZ,SAYxBrE,EAAmB4B,OAAOC,OAAO,GAAI+C,EAAU,CAAEE,KAAMhF,EAASkC,gBAA7CJ,OAAA,IAAAA,CAAA,GAAmEoC,EAAclE,EAASmC,WAZrF,cAY7C8C,EAZ6C,iBAajC1E,EAA0B0E,GAbO,aAa7ChE,EAb6C,4BAgB5B,QAAfA,EAAI0B,OAhBuC,iBAiB7C6B,EAASV,EAAY,aACnBC,QAAS9C,EAAIiE,iBACVZ,KAELE,EAASX,EAAc,CAACpC,SAAU,GAAIkB,OAAQ,SArBD,2BAsBrB,QAAf1B,EAAI0B,OAtBgC,uBAuBvC,IAAIhD,MAAMsB,EAAIkE,OAvByB,0DA2BjDX,EAASX,EAAc,CAACpC,SAAU,KAAM2D,QAASzC,OAAQ,SA3BR,0DAAvB,yDA+BfzB,IAAf,QCzFe,aAAO,IAAD,EAE2BmE,aAAY,SAAAzD,GAAK,OAAIA,EAAM0D,aAAjEhE,EAFW,EAEXA,UAAWE,EAFA,EAEAA,IAAKD,EAFL,EAEKA,QAASE,EAFd,EAEcA,SAC3B+C,EAAWe,cAWjB,OATAC,qBAAU,WACJlE,GACFkD,EFa0B,uCAAM,WAAMA,GAAN,qBAAA9E,EAAA,sEFH7BH,EAASQ,eEGoB,UAChC0F,EADgC,OAEhCzF,EAAW,KAEXyF,GAAaA,EAAUxF,OAAS,GAJA,iBAKzByF,EAAI,EALqB,YAKlBA,EAAID,EAAUxF,QALI,iCFAX8D,EEMU0B,EAAUC,GFLtCnG,EAASoG,WAAW5B,GEDS,OAM5B6B,EAN4B,OAOhC5F,EAASqD,KAAK,CACZU,QAAS0B,EAAUC,GACnBE,QAASA,EAAQC,aATa,QAKIH,IALJ,uBAYlClB,EAASlC,EAAYtC,IACrBwE,EAASjC,EAAkBvC,EAAS,GAAG+D,UAbL,wBAelCS,EAASlC,EAAY,KACrBkC,EAASjC,EAAkB,KAhBO,kCFAZ,IAACwB,IEAW,OAAN,uDEXvBzC,GACHkD,EAASP,OAEV,CAAC3C,IAGF,6BACE,2BACE,0CACA,2BACE,uBACEwE,SAAUxE,EACVe,MAAOb,EACPuE,SAAU,SAACC,GAAD,OAAOxB,EAAS7C,EAAW,CAAEH,IAAKwE,EAAErC,OAAOtB,cAG3D,uBACE4D,MAAO,CAAEC,OAAQ,oBACjBC,QAAS,kBAAM3B,EHfM,uCAAM,WAAOA,EAAUC,GAAjB,mBAAA/E,EAAA,2DACR+E,IAAWa,UAA9BhE,EAD2B,EAC3BA,UAAWE,EADgB,EAChBA,IADgB,SAI/BgD,EAAS7C,EAAW,CAAEJ,SAAS,MAE3BD,EAN2B,gBAO7BkD,EAAS7C,EAAW,CAAEL,WAAW,EAAOC,SAAS,KAPpB,uCASvB/B,EAAYgC,GATW,OAU7BgD,EAAS7C,EAAW,CAAEL,WAAW,EAAMC,SAAS,EAAOE,SAAU,MAVpC,0DAa/B+C,EAAS7C,EAAW,CAAEJ,SAAS,EAAOE,SAAU,KAAM2D,WACtDV,QAAQ0B,MAAR,MAd+B,0DAAN,0DGgBrBN,SAAUvE,EACV8E,KAAK,WACJ9E,GAAW,kBAAC+E,EAAA,EAAD,MACXhF,EAAY,aAAe,WAE7BA,GAAa,0BAAMiF,UAAU,gBAAhB,aACb9E,GAAY,0BAAM8E,UAAU,cAAc9E,K,qEClClC,aAAO,IAAD,EAEkB4D,aAAY,SAAAzD,GAAK,OAAIA,EAAM5B,YAAxDA,EAFW,EAEXA,SAAUkC,EAFC,EAEDA,eAFC,EAGmBsE,oBAAS,GAH5B,mBAGXC,EAHW,KAGCC,EAHD,OAIOF,mBAAS,SAJhB,mBAIXG,EAJW,KAILC,EAJK,OAKeJ,mBAAS,KALxB,mBAKXpE,EALW,KAKDyE,EALC,OAMSL,mBAAS,GANlB,mBAMXnE,EANW,KAMJyE,EANI,KAObtC,EAAWe,cAEjBC,qBAAU,WAINhB,EAAShC,EAHNH,EAGgB,CACjBA,MAAO0E,QAAYC,WAAW3E,EAAOsE,GAAMM,eAH1B,CAAE5E,MAAO,WAM7B,CAACA,EAAOsE,IAEXnB,qBAAU,WAINhB,EAAShC,EAHNJ,EAGgB,CACjBA,SAAU2E,QAAYG,cAAcH,QAAYI,aAAa/E,GAAU6E,gBAHtD,CAAE7E,SAAU,WAMhC,CAACA,IAEJ,IAIMgF,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACpB,oCACE,8BAAOA,EAAQtD,QAAQuD,OAAO,EAAG,IAAjC,MAAyCD,EAAQtD,QAAQuD,QAAQ,GAAjE,MAAwEP,QAAYQ,YAAYF,EAAQzB,SAAxG,WAIJ,OACE,6BACE,uBAAKW,UAAU,OACb,uCAEE,uBAAQN,MAAO,CAACuB,MAAO,QAASC,aAAc,OAAQtB,QAAS,WAAOO,GAAeD,KAArF,UACWA,EAAa,kBAACiB,EAAA,EAAD,MAAmB,kBAACC,EAAA,EAAD,QAG7C,uBAAKC,KAAM,IACT,uBACE9B,SAA8B,IAApB9F,EAASC,OACnBoC,MAAOH,EACP6D,SAAU,SAAC8B,GAAQrD,EAASjC,EAAkBsF,KAC9C5B,MAAO,CAAE6B,MAAO,SAEd9H,EAASC,OAAS,GAClBD,EAAS+H,KAAI,SAAAV,GAAO,OAClB,sBAAQW,OAAR,CAAe3F,MAAOgF,EAAQtD,QAASkE,IAAKZ,EAAQtD,SAAS,kBAACqD,EAAD,CAAeC,QAASA,UAK7F,uBAAKO,KAAM,GAAG,kBAACM,EAAA,EAAD,CAAcjC,MAAO,CAACkC,YAAa,QAAShC,QAjC7C,WACjBiC,IAAKlG,QAmCDuE,GACA,oCACE,uBAAK4B,OAAQ,CAAC,EAAG,IACf,uBAAKT,KAAM,GAAX,YACA,uBAAKA,KAAM,IACT,uBAAOvF,MAAOD,EAAU2D,SAAU,SAACC,GAAOa,EAAYb,EAAErC,OAAOtB,YAGnE,uBAAKgG,OAAQ,CAAC,EAAG,IACf,uBAAKT,KAAM,GAAX,SACA,uBAAKA,KAAM,IACT,uBAAOvF,MAAOA,EAAO0D,SAAU,SAACC,GAAOc,EAASd,EAAErC,OAAOtB,WAE3D,uBAAKuF,KAAM,GACT,uBAAQvF,MAAOsE,EAAMZ,SAAU,SAAA8B,GAAC,OAAIjB,EAAQiB,KAC1C,sBAAQG,OAAR,CAAe3F,MAAM,SAArB,SACA,sBAAQ2F,OAAR,CAAe3F,MAAM,OAArB,a,iDChFHiG,GAAc,SAACC,GAAW,IAE7BjF,EAAkBiF,EAAlBjF,IAAKkF,EAAaD,EAAbC,SAFuB,EAGEhC,oBAAS,GAHX,mBAG5BiC,EAH4B,KAGhBC,EAHgB,OAIIlC,mBAAS,IAJb,mBAI5BmC,EAJ4B,KAIfC,EAJe,OAKJpC,oBAAS,GALL,mBAK5BjF,EAL4B,KAKnBsH,EALmB,OAMArC,mBAAS,IANT,mBAM5BsC,EAN4B,KAMjBC,EANiB,OAOFvC,mBAAS,IAPP,mBAO5B/E,EAP4B,KAOlBuH,EAPkB,KAS9BC,EAAgB,WACpB,MAAiB,gBAAb3F,EAAI+C,KACC,SAEL/C,EAAIlC,KACCkC,EAAIlC,KAEN,YAeH8H,EAAe,WAEnBF,EAAY,IACZH,GAAW,GACXL,EAA0BG,EATZZ,KAAI,SAAAF,GAChB,OAAOA,EAAEsB,WAQ6B,SAASlI,GAC/CyD,QAAQC,KAAK1D,GACTA,GAAOA,EAAImI,SACbL,EAAa9H,EAAImI,SAEfnI,GAAOA,EAAIQ,UACbuH,EAAY/H,EAAIQ,SAAS2D,SAE3ByD,GAAW,OAIf,OACE,qCAEKJ,GACD,uBAAKJ,OAAQ,CAAC,EAAG,KACf,uBAAKT,KAAM,IACT,uBAAQzB,QAAS+C,EAAc7C,KAA8B,SAAxB/C,EAAI+F,gBAA6B,GAAK,WACvE9H,GAAW,kBAAC+E,EAAA,EAAD,MADf,IACsC2C,MAItC3F,EAAIgG,QAAUhG,EAAIgG,OAAOrJ,OAAS,GAClC,oCACE,uBAAK2H,KAAM,IACT,uBACE2B,YAAajG,EAAIgG,OAAOrJ,OAAS,GAAKuJ,KAAEC,MAAMnG,EAAIgG,OAAQ,QAAQI,KAAK,MACvErH,MAAOsG,EAAYe,KAAK,KACxB3D,SAAU,SAAAC,GAAM4C,EAAe5C,EAAErC,OAAOtB,MAAMsH,MAAM,UAExD,uBAAK/B,KAAM,GAAG,kBAACF,EAAA,EAAD,CAAcvB,QAAS,kBAAMuC,GAAc,SAM/DD,GACA,uBAAKlC,UAAU,kBAAkB8B,OAAQ,CAAC,EAAG,KAC3C,wCACaY,IACX,0BAAMhD,MAAO,CAACuB,MAAO,UAAU,kBAACG,EAAA,EAAD,CAAYxB,QAAS,WAAOuC,GAAc,QAGzEpF,EAAIgG,QAAUhG,EAAIgG,OAAOrJ,OAAS,GAClCqD,EAAIgG,OAAOvB,KAAI,SAAC6B,EAAOC,GAAR,OACb,yBAAK5B,IAAK4B,GACR,uBAAKjC,KAAM,EAAG3B,MAAO,CAAC6D,UAAW,UAAWF,EAAMxI,MAClD,uBAAKwG,KAAM,IACT,uBACE2B,YAAaK,EAAMvD,KACnBhE,MAAOsG,EAAYkB,GACnB9D,SAAU,SAAAC,IApEF,SAACA,EAAG6D,GAC5B,IAAIE,EAASP,KAAEQ,MAAMrB,GACrBoB,EAAOF,GAAS7D,EAAErC,OAAOtB,MACzBuG,EAAemB,GAiEkBE,CAAkBjE,EAAG6D,WAKhD,uBAAKjC,KAAM,IACT,uBAAQvB,KAAK,UAAUF,QAAS+C,GAAgB3H,GAAW,kBAAC+E,EAAA,EAAD,MAA3D,eAKJhD,EAAI8F,SAAW9F,EAAI8F,QAAQnJ,OAAS,GACnC,2BAEG6I,EAAUf,KAAI,SAACmC,EAAQL,GAAT,OACZ,uBAAK5B,IAAK4B,GAAQA,EAAlB,IAA0BK,EAAO9I,KAAjC,IAAwC8I,EAAO7D,KAAP,WAAkB6D,EAAO7D,KAAzB,KAAmC,GAA3E,KAAiF6D,EAAO7H,WAK9FZ,GAAY,2BAAK,uBAAK8E,UAAU,cAAc9E,MAKzC0I,GAAW,SAAC5B,GAAW,IAE1BjE,EAAaiE,EAAbjE,SAFyB,EAGEe,aAAY,SAAAzD,GAAK,OAAIA,EAAM5B,YAAtDkC,EAHyB,EAGzBA,eAAgBC,EAHS,EAGTA,OAHS,EAIGqE,oBAAS,GAJZ,mBAIzB4D,EAJyB,KAIdC,EAJc,OAKC7D,mBAASlC,GALV,mBAKzBgG,EALyB,KAKfC,EALe,KAM3B/F,EAAWe,cAEjBC,qBAAU,WACR+E,ENlG+B,SAACjG,GAClC,OAAO,IAAI1E,SAAOuK,SAAS7F,EAASP,QAASO,EAAShB,IAAK/D,GMiG7CiL,CAAoBlG,MAC/B,CAACA,IAEJ,IAIMmG,EAAc,SAACxJ,EAAKmI,GACxB,OAAInI,IAAQuI,KAAEkB,QAAQzJ,GAMb,CALY,CACjBoB,MAAOpB,EAAI4E,WACXQ,KAAM+C,EAAQ,GAAG/C,KAAO+C,EAAQ,GAAG/C,KAAO,GAC1CjF,KAAMgI,EAAQ,GAAGhI,KAAOgI,EAAQ,GAAGhI,KAAO,KAI1CH,GAAOuI,KAAEkB,QAAQzJ,IAAQA,EAAIhB,OAAS,EACjCuJ,KAAEzB,IAAI9G,GAAK,SAACoB,EAAOwH,GACxB,MAAO,CACLxH,MAAOA,EAAMwD,WACbQ,KAAM+C,EAAQS,GAAOxD,KAAO+C,EAAQS,GAAOxD,KAAO,GAClDjF,KAAMgI,EAAQS,GAAOzI,KAAOgI,EAAQS,GAAOzI,KAAO,OAIjD,IAGH8H,EAAY,uCAAG,WAAO5F,EAAKuE,EAAG8C,GAAf,yBAAAjL,EAAA,kEAEW,SAAxB4D,EAAI+F,gBAFS,uBAGf3E,QAAQC,KAAKkD,GAHE,UAIC,EAAAyC,EAASM,UAAUtH,EAAIlC,OAAMyJ,KAA7B,SAAkC,IAAlC,mBAA2ChD,KAJ5C,OAIX5G,EAJW,OAKf0J,EAAG,CAACvB,QAASqB,EAAYxJ,EAAKqC,EAAI8F,WALnB,8BAOXrG,EAAOuH,EAASQ,UAAUF,UAAUtH,EAAIlC,MAAM2J,OAAOlD,GACrD1H,EAAK2B,OAAOC,OAAO,CAACgB,OAAMiI,GAAIV,EAASvG,SAAU5B,EAAQ,CAAC6C,KAAM9C,IARrD,UASIhC,EAAmBC,GATvB,eASXG,EATW,iBAUCC,EAA0BD,GAV3B,SAUXW,EAVW,UAaM,QAAfA,EAAI0B,OACNgI,IACuB,OAAd1J,EAAI0B,QACbgI,EAAG,CAAClJ,SAAU,IAAI9B,MAAMsB,EAAIkE,UAhBjB,0DAqBjBT,QAAQ0B,MAAR,MACAuE,EAAG,CAAClJ,SAAS,EAAD,KAtBK,0DAAH,0DA0BlB,OACE,yBAAK8E,UAAW6D,EAAY,iBAAmB,IAC7C,uBAAK7D,UAAU,OACb,uBAAKA,UAAU,eACZjC,EAASlD,KADZ,iBACyBkJ,EAASvG,QAAQuD,OAAO,EAAG,GADpD,eAC6DgD,EAASvG,QAAQuD,QAAQ,IADtF,IAEE,0BAAMrB,MAAO,CAACuB,MAAO,UAEjB4C,EACA,kBAACzC,EAAA,EAAD,CAAY1B,MAAO,CAACkC,YAAa,QAAShC,QAAS,kBAAMkE,GAAcD,MACvE,kBAAC1C,EAAA,EAAD,CAAczB,MAAO,CAACkC,YAAa,QAAShC,QAAS,WAAOkE,GAAcD,MAE5E,kBAAClC,EAAA,EAAD,CAAcjC,MAAO,CAACkC,YAAa,QAAShC,QA9DnC,WACjBiC,IAAKkC,EAASvG,YA8DN,kBAACkH,GAAA,EAAD,CAAqBhF,MAAO,CAACkC,YAAa,QAAShC,QAAS,WAAO3B,EAASR,EAAesG,EAASvG,gBAKxGqG,GACAZ,KAAE0B,OAAOZ,EAASQ,UAAUxH,KAAK,SAAA6H,GAAE,MAAe,YAAXA,EAAG9E,QAAoB0B,KAAI,SAACzE,EAAKuG,GAAN,OAChE,kBAAC,GAAD,CAAa5B,IAAK4B,EAAOvG,IAAKA,EAAKkF,SAAU,SAACX,EAAG8C,GAAJ,OAAWzB,EAAa5F,EAAKuE,EAAG8C,WCnMxE,cAEb,IAAMnG,EAAWe,cAFE,EAG4BF,aAAY,SAAAzD,GAAK,OAAIA,EAAMwJ,UAAlE3I,EAHW,EAGXA,YAAaC,EAHF,EAGEA,WAAYE,EAHd,EAGcA,UAHd,EAIe4D,mBAAS,IAJxB,mBAIX6E,EAJW,KAIDC,EAJC,OAK6B9E,oBAAS,GALtC,mBAKX+E,EALW,KAKMC,EALN,OAMahF,mBAAS,IANtB,mBAMXiF,EANW,KAMFC,EANE,KAQnBlG,qBAAU,WACJ/C,GAAeA,EAAYxC,OAAS,GACtCqL,EAAY7I,EAAY,MAEzB,CAACA,IAEJ+C,qBAAU,WACR,IAAI+F,EAAkB/B,KAAEmC,KAAKN,EAAS/H,KAAK,SAAA6H,GAAE,MAAgB,gBAAZA,EAAG9E,QACpDmF,EAAmBD,KAClB,CAACF,IAuBJ,OACE,mDAEE,uBACEpF,MAAO,CAAE6B,MAAO,OAAQL,aAAc,OACtCpF,MAAOgJ,EAASjK,KAChB2E,SA3Be,SAAC8B,GACpB,IAAI+D,EAAepC,KAAEmC,KAAKlJ,GAAa,SAAC0I,GAAD,OAAQA,EAAG/J,OAASyG,KAEvD+D,GACFN,EAAYM,KAyBRnJ,GAAeA,EAAYxC,OAAS,GACpCwC,EAAYsF,KAAI,SAAA8D,GAAQ,OACtB,sBAAQ7D,OAAR,CAAe3F,MAAOwJ,EAASzK,KAAM6G,IAAK4D,EAASzK,MAAOyK,EAASzK,UAIzE,uBAAKiH,OAAQ,CAAC,GAAI,IAChB,2BAEIkD,EACE,kBAAC,GAAD,CAAajI,IAAKiI,EAAiB/C,SAAU,SAACX,EAAG8C,IA/BxC,SAAC9C,EAAG8C,GACvBnG,EAASH,EAAegH,EAAUxD,IAAI7G,MAAK,WACzC2J,EAAG,CAAClJ,SAAUiB,EAAWjB,cA6BwCqK,CAAajE,EAAG8C,MACzE,uBAAQtE,KAAK,UAAUF,QAAS,kBAAM3B,EAASH,EAAegH,MACpC,cAAtB3I,EAAWC,QAA0B,kBAAC2D,EAAA,EAAD,MADzC,YAKN,iCACA,uBAAKsB,KAAM,GACT,uBAAQzB,QAjCK,WACnB3B,EAASV,EAAY,aACnBC,QAAS0H,GACNJ,OA8BC,OAEF,uBAAKzD,KAAM,IACT,uBAAO2B,YAAY,4BAA4BlH,MAAOoJ,EAAS1F,SAAU,SAAAC,GAAC,OAAI0F,EAAW1F,EAAErC,OAAOtB,YAGtG,2BACE,uBAAKkE,UAAU,cAAc7D,EAAWjB,WAGxCmB,GAAad,OAAOoB,KAAKN,GAAW3C,OAAS,GAC7C,oCACE,uBAAKsG,UAAU,OACb,2BACE,qDACA,0BAAMN,MAAO,CAACuB,MAAO,UACnB,kBAACuE,EAAA,EAAD,CAAgB5F,QAAS,WAAO3B,EAASP,WAK7CnC,OAAOoB,KAAKN,GAAWmF,KAAI,SAAAhE,GAAO,OAChC,kBAAC,GAAD,CAAUkE,IAAKlE,EAASO,SAAU1B,EAAUmB,W,OCxE3CiI,OAjBf,WAAgB,IACN1K,EAAa+D,aAAY,SAAAzD,GAAK,OAAIA,EAAM0D,aAAxChE,UAER,OACE,yBAAKiF,UAAU,OACb,kBAAC0F,EAAD,MAEE3K,EACA,oCACE,kBAAC4K,EAAD,MACA,kBAACC,GAAD,OACG,KCfAjL,GAAQC,YAAY,CAC/BC,KAAM,WACNC,aAAc,CACZuB,UAAW,IAEblB,SAAU,CACRoC,YAAa,SAAClC,EAAOC,GACnBD,EAAMgB,UAAUf,EAAOG,QAAQ+B,SAAWlC,EAAOG,QAAQsC,UAE3DN,eAAgB,SAACpC,EAAOC,UACfD,EAAMgB,UAAUf,EAAOG,UAEhCiC,eAAgB,SAACrC,GACfA,EAAMgB,UAAY,O,GAKuC1B,GAAMe,QAgCtDf,I,GAhCA4C,Y,GAAaE,e,GAAgBC,eAgC7B/C,GAAf,SC/CekL,eAAe,CAC5BC,QAAS,CACP/G,UAAWgH,EACXtM,SAAUuM,EACVnB,OAAQoB,EACRlI,SAAUmI,MCCMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCRAC,GAASC,gCAEfD,GAAOE,OAAP,sBAAc,4BAAAvN,EAAA,6DACZwN,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOA,IACf,kBAAC,GAAD,CAAKL,OAAQA,MAEfM,SAASC,eAAe,SALd,SAQSP,GAAOQ,SAASC,uBARzB,QAQR3B,EARQ,SAUIA,EAAS9I,MACvBqK,GAAM5I,SAAS3B,EAAegJ,IAGhCkB,GAAOU,GAAG,WAAY,uBAAuB,SAACC,EAAU1K,EAAQ2K,EAAS5K,GACvEqK,GAAM5I,SAAS3B,EAAe,CAACE,OAAMC,eAf3B,4CDuHR,kBAAmB4K,WACrBA,UAAUC,cAAcC,MAAM9M,MAAK,SAAA+M,GACjCA,EAAaC,kB","file":"static/js/main.a34c4f79.chunk.js","sourcesContent":["// import Web3 from 'web3'\n// let web3\n\nimport { ethers } from 'ethers'\n\nlet provider\n\nexport const testConnect = async (endpoint) => {\n  if (!endpoint) {\n    throw new Error('RPC endpoint is null')\n  }\n\n  try {\n    provider = new ethers.providers.JsonRpcProvider(endpoint)\n\n    let accounts = await provider.listAccounts()\n    if (accounts.length > 0) {\n      return accounts\n    }\n  } catch (error) {\n    throw new Error(`Test connect error: ${error}`)\n  }\n}\n\nexport const getAccounts = () => {\n  return provider.listAccounts()\n}\n\nexport const getBalance = (address) => {\n  return provider.getBalance(address)\n}\n\nexport const getContractInstance = (contract) => {\n  return new ethers.Contract(contract.address, contract.abi, provider)\n}\n\nexport const getSigner = (account) => {\n  return provider.getSigner(account)\n}\n\nexport const ethSendTransaction = async (tx) => {\n  return provider.send('eth_sendTransaction', [tx])\n}\n\nexport const getTransactionReceipt = (txHash) => {\n  return provider.send('eth_getTransactionReceipt', [txHash])\n}\n\nexport const getTransactionReceiptLoop = (txHash, timeout = 5000) => {\n  let getContractReceiptTimer, timer = 0  \n\n  return new Promise((resolve, reject) => {\n    getContractReceiptTimer = setInterval(() => {\n      timer += 500\n      if (timer > timeout) {\n        clearInterval(getContractReceiptTimer)\n        return reject('Get transaction receipt time out!')\n      }\n  \n      getTransactionReceipt(txHash).then(res => {\n        if (res) {\n          clearInterval(getContractReceiptTimer)\n          return resolve(res)\n        }\n      })\n    }, 500)\n  })\n}","import { createSlice } from '@reduxjs/toolkit';\nimport { testConnect } from '../../api';\n\nexport const slice = createSlice({\n  name: 'lkconnect',\n  initialState: {\n    isConnect: false,\n    loading: false,\n    RPC: 'http://localhost:36000',\n    errorMsg: '',\n  },\n  reducers: {\n    setConnect: (state, action) => {\n      return Object.assign({}, state, action.payload)\n    }\n  }\n})\n\nexport const { setConnect } = slice.actions\n\nexport const handleConnect = () => async (dispatch, getState) => {\n  let { isConnect, RPC } = getState().lkconnect\n\n  try {\n    dispatch(setConnect({ loading: true }))\n\n    if (isConnect) {    // disconnect rpc\n      dispatch(setConnect({ isConnect: false, loading: false }))\n    } else {    // connect rpc\n      await testConnect(RPC)\n      dispatch(setConnect({ isConnect: true, loading: false, errorMsg: '' }))\n    }\n  } catch (error) {\n    dispatch(setConnect({ loading: false, errorMsg: error.message }))\n    console.error(error)\n  }\n}\n\nexport default slice.reducer\n","import { createSlice } from '@reduxjs/toolkit';\nimport { getAccounts, getBalance } from '../../api';\n\nexport const slice = createSlice({\n  name: 'accounts',\n  initialState: {\n    accounts: [],\n    currentAccount: '',\n    txMeta: {\n      gasLimit: '300000', // 300000\n      value: '0x0'\n    },\n  },\n  reducers: {\n    setAccounts: (state, action) => {\n      state.accounts = action.payload\n    },\n    setCurrentAccount: (state, action) => {\n      state.currentAccount = action.payload\n    },\n    setTxMeta: (state, action) => {\n      state.txMeta = Object.assign({}, state.txMeta, action.payload)\n    }\n  }\n})\n\nexport const { setAccounts, setCurrentAccount, setTxMeta } = slice.actions\n\nexport const setAccountsAsync = () => async dispatch => {\n  let addresses = await getAccounts()\n  let accounts = []\n\n  if (addresses && addresses.length > 0) {\n    for (let i = 0; i < addresses.length; i++) {\n      let balance = await getBalance(addresses[i])\n      accounts.push({\n        address: addresses[i],\n        balance: balance.toString()\n      })\n    }\n    dispatch(setAccounts(accounts))\n    dispatch(setCurrentAccount(accounts[0].address))\n  } else {\n    dispatch(setAccounts([]))\n    dispatch(setCurrentAccount(''))\n  }\n}\n\nexport default slice.reducer\n","import { createSlice } from '@reduxjs/toolkit';\nimport { getTransactionReceiptLoop, ethSendTransaction } from '../../api'\nimport { ethers } from 'ethers'\n\n\nexport const slice = createSlice({\n  name: 'deploy',\n  initialState: {\n    compilation: [],\n    deployInfo: {\n      status: '',\n      errorMsg: ''\n    },\n    contracts: {}\n  },\n  reducers: {\n    addCompilation: (state, action) => {\n      let { data, source } = action.payload\n      let sourceKey, compiledArray = []\n\n      if (data && data.contracts) {\n        sourceKey = Object.keys(data.contracts)[0]\n\n        for (let compiledKey of Object.keys(data.contracts[sourceKey])) {\n          let compiledItem = data.contracts[sourceKey][compiledKey]\n\n          compiledArray.push({\n            name: compiledKey,\n            abi: compiledItem.abi,\n            bytecode: compiledItem.evm.bytecode.object,\n            source: source.sources[source.target].content\n          })\n        }\n      }\n      state.compilation = compiledArray\n    },\n    setDeployInfo: (state, action) => {\n      state.deployInfo = action.payload\n    },\n    setContract: (state, action) => {\n      state.contracts[action.payload.address] = action.payload\n    },\n    deleteContract: (state, action) => {\n      delete state.contracts[action.payload]\n    },\n    clearContracts: (state) => {\n      state.contracts = {}\n    }\n  }\n})\n\nexport const { addCompilation, setDeployInfo, setContract, deleteContract, clearContracts } = slice.actions\n\nfunction parseTxParams(tx) {\n  let params = {}\n\n  if (tx.gasLimit <= 0) {\n    throw new Error('Gas limit error!')\n  }\n  params.gas = tx.gasLimit\n  if (tx.value && tx.value != '0x00') {\n    params.value = tx.value\n  } \n  return params\n}\n\nexport const deployContract = (contract, args=[]) => async (dispatch, getState) => {\n  console.info(args)\n  dispatch(setDeployInfo({errorMsg: '', status: 'deploying'}))\n  let { accounts } = getState()\n\n  if (!accounts.currentAccount) {\n    dispatch(setDeployInfo({errorMsg: 'Select a from account to send transaction!', status: 'finish'}))\n  }\n\n  try {\n    let deployContractFactory = new ethers.ContractFactory(contract.abi, contract.bytecode)\n    let deployTx = deployContractFactory.getDeployTransaction(...args)\n    let deployTxHash = await ethSendTransaction(Object.assign({}, deployTx, { from: accounts.currentAccount }, {...parseTxParams(accounts.txMeta)}))\n    let res = await getTransactionReceiptLoop(deployTxHash)\n\n    if (res) {\n      if (res.status === '0x1') {\n        dispatch(setContract({\n          address: res.contractAddress,\n          ...contract\n        }))\n        dispatch(setDeployInfo({errorMsg: '', status: 'end'}))\n      } else if (res.status === '0x0') {\n        throw new Error(res.vmerr)\n      }\n    }\n  } catch (error) {\n    dispatch(setDeployInfo({errorMsg: error.message, status: 'end'}))\n  }\n}\n\nexport default slice.reducer","import React, { useEffect } from 'react'\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { Input, Button, Row, Col } from 'antd'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { handleConnect, setConnect } from './lkconnectSlice'\nimport { setAccountsAsync } from '../accounts/AccountsSlice';\nimport { clearContracts } from '../deploy/DeploySlice';\n\nexport default () => {\n\n  const { isConnect, RPC, loading, errorMsg } = useSelector(state => state.lkconnect)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (isConnect) {\n      dispatch(setAccountsAsync())\n    }\n    if (!isConnect) {\n      dispatch(clearContracts())\n    }\n  }, [isConnect])\n\n  return (\n    <div>\n      <Row>\n        <Col>LkchainRPC:</Col>\n        <Col>\n          <Input\n            disabled={isConnect}\n            value={RPC}\n            onChange={(e) => dispatch(setConnect({ RPC: e.target.value }))} />\n        </Col>\n      </Row>\n      <Button\n        style={{ margin: \"10px 10px 10px 0\" }}\n        onClick={() => dispatch(handleConnect())}\n        disabled={loading}\n        type=\"primary\">\n        {loading && <LoadingOutlined />}\n        {isConnect ? 'disconnect' : 'connect'}\n      </Button>\n      {isConnect && <span className=\"successColor\">Connected</span>}\n      {errorMsg && <span className=\"errorColor\">{errorMsg}</span>}\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Select, Row, Col, Button, Input } from 'antd'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setCurrentAccount, setTxMeta } from './AccountsSlice'\nimport { utils as ethersUtils} from 'ethers'\nimport copy from 'copy-to-clipboard'\nimport { DownOutlined, UpOutlined, CopyOutlined } from '@ant-design/icons'\n\nexport default () => {\n\n  const { accounts, currentAccount } = useSelector(state => state.accounts)\n  const [ showTxMeta, setShowTxMeta ] = useState(false)\n  const [ unit, setUnit ] = useState('ether')\n  const [ gasLimit, setGasLimit ] = useState(300000)\n  const [ value, setValue ] = useState(0)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (!value) {\n      dispatch(setTxMeta({ value: '0x0' }))\n    } else {\n      dispatch(setTxMeta({\n        value: ethersUtils.parseUnits(value, unit).toHexString()\n      }))\n    }\n  }, [value, unit])\n\n  useEffect(() => {\n    if (!gasLimit) {\n      dispatch(setTxMeta({ gasLimit: '0x0' }))\n    } else {\n      dispatch(setTxMeta({\n        gasLimit: ethersUtils.hexStripZeros(ethersUtils.bigNumberify(gasLimit).toHexString())\n      }))\n    }\n  }, [gasLimit])\n\n  const handleCopy = () => {\n    copy(currentAccount)\n  }\n\n  const AccountOption = ({ account }) => (\n    <>\n      <span>{account.address.substr(0, 12)}...{account.address.substr(-8)} / {ethersUtils.formatEther(account.balance)}ether</span>\n    </>\n  )\n\n  return (\n    <div>\n      <Row className=\"row\">\n        <Col>\n          Accounts:\n          <Button style={{float: \"right\", marginBottom: \"5px\"}} onClick={() => {setShowTxMeta(!showTxMeta)}}>\n            TxMeta { showTxMeta ? <DownOutlined /> : <UpOutlined /> }\n          </Button>\n        </Col>\n        <Col span={22}>\n          <Select\n            disabled={accounts.length === 0}\n            value={currentAccount}\n            onChange={(v) => { dispatch(setCurrentAccount(v)) }}\n            style={{ width: \"100%\" }}>\n            {\n              accounts.length > 0 &&\n              accounts.map(account => (\n                <Select.Option value={account.address} key={account.address}><AccountOption account={account} /></Select.Option>\n              ))\n            }\n          </Select>\n        </Col>\n        <Col span={2}><CopyOutlined style={{paddingLeft: \"10px\"}} onClick={handleCopy}/></Col>\n      </Row>\n      {\n        showTxMeta && \n        <>\n          <Row gutter={[6, 5]}>\n            <Col span={6}>GasLimit</Col>\n            <Col span={18}>\n              <Input value={gasLimit} onChange={(e) => {setGasLimit(e.target.value)}}/>\n            </Col>\n          </Row>\n          <Row gutter={[6, 5]}>\n            <Col span={6}>Value</Col>\n            <Col span={12}>\n              <Input value={value} onChange={(e) => {setValue(e.target.value)}}/>\n            </Col>\n            <Col span={6}>\n              <Select value={unit} onChange={v => setUnit(v)}>\n                <Select.Option value=\"ether\">ether</Select.Option>\n                <Select.Option value=\"wei\">wei</Select.Option>\n              </Select>\n            </Col>\n          </Row>\n        </>\n      }\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Input, Button, Row, Col } from 'antd'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { DownOutlined, UpOutlined, CopyOutlined, CloseCircleOutlined, LoadingOutlined } from '@ant-design/icons'\nimport copy from 'copy-to-clipboard'\nimport { deleteContract } from '../deploy/DeploySlice'\nimport _ from 'underscore'\nimport { getContractInstance, ethSendTransaction, getTransactionReceiptLoop } from '../../api'\n\nexport const MethodInput = (props) => {\n\n  const { abi, onSubmit } = props\n  const [ showInputs, setShowInputs ] = useState(false)\n  const [ inputValues, setInputValues ] = useState([])\n  const [ loading, setLoading ] = useState(false)\n  const [ outputRes, setOutputRes ] = useState([])\n  const [ errorMsg, setErrorMsg ] = useState('')\n\n  const getMethodName = () => {\n    if (abi.type === 'constructor') {\n      return 'Deploy'\n    }\n    if (abi.name) {\n      return abi.name\n    }\n    return 'fallback'\n  }\n\n  const handleInputChange = (e, index) => {\n    let values = _.clone(inputValues)\n    values[index] = e.target.value\n    setInputValues(values)\n  }\n\n  const parseInputValues = (values) => {\n    return values.map(v => {\n      return v.trim()\n    })\n  }\n\n  const handleSubmit = () => {\n    // callback to set loading and res\n    setErrorMsg('')\n    setLoading(true)\n    onSubmit(parseInputValues(inputValues), function(res) {\n      console.info(res)\n      if (res && res.outputs) {\n        setOutputRes(res.outputs)\n      }\n      if (res && res.errorMsg) {\n        setErrorMsg(res.errorMsg.message)\n      }\n      setLoading(false)\n    })\n  }\n\n  return (\n    <>\n      {\n        !showInputs &&\n        <Row gutter={[0, 10]}>\n          <Col span={10}>\n            <Button onClick={handleSubmit} type={abi.stateMutability === 'view' ? '' : 'primary'}>\n              { loading && <LoadingOutlined /> } {getMethodName()}\n            </Button>\n          </Col>\n          {\n            abi.inputs && abi.inputs.length > 0 && \n            <>\n              <Col span={13}>\n                <Input \n                  placeholder={abi.inputs.length > 0 && _.pluck(abi.inputs, 'type').join(', ')} \n                  value={inputValues.join(',')} \n                  onChange={e => {setInputValues(e.target.value.split(','))}}/>\n              </Col>\n              <Col span={1}><DownOutlined onClick={() => setShowInputs(true)}/></Col>\n            </>\n          }\n        </Row>\n      }\n      {\n        showInputs &&\n        <Row className=\"abiInputsPannel\" gutter={[6, 10]}>\n          <Col>\n            function: {getMethodName()}\n            <span style={{float: \"right\"}}><UpOutlined onClick={() => {setShowInputs(false)}}/></span>\n          </Col>\n          {\n            abi.inputs && abi.inputs.length > 0 && \n            abi.inputs.map((input, index) => (\n              <div key={index}>\n                <Col span={8} style={{textAlign: \"right\"}}>{input.name}</Col>\n                <Col span={16}>\n                  <Input \n                    placeholder={input.type} \n                    value={inputValues[index]} \n                    onChange={e => { handleInputChange(e, index) }}/>\n                </Col>\n              </div>\n            ))\n          }\n          <Col span={24}>\n            <Button type=\"primary\" onClick={handleSubmit}>{ loading && <LoadingOutlined /> } Transact</Button>\n          </Col>\n        </Row>\n      }\n      {\n        abi.outputs && abi.outputs.length > 0 && \n        (<Row>\n          {\n            outputRes.map((output, index) => (\n              <Col key={index}>{index} {output.name} {output.type ? `(${output.type})` : ''}: {output.value}</Col>\n            ))\n          }\n        </Row>)\n      }\n      { errorMsg && <Row><Col className=\"errorColor\">{errorMsg}</Col></Row>}\n    </>\n  )\n}\n\nexport const Contract = (props) => {\n\n  const { contract } = props\n  const { currentAccount, txMeta } = useSelector(state => state.accounts)\n  const [ showFuncs, setShowFuncs ] = useState(false)\n  const [ instance, setInstance ] = useState(contract)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    setInstance(getContractInstance(contract))\n  }, [contract])\n\n  const handleCopy = () => {\n    copy(instance.address)\n  }\n\n  const parseOutput = (res, outputs) => {\n    if (res && !_.isArray(res)) {\n      let parsedOutput = {\n        value: res.toString(),\n        type: outputs[0].type ? outputs[0].type : '',\n        name: outputs[0].name ? outputs[0].name : '',\n      }\n      return [parsedOutput]\n    }\n    if (res && _.isArray(res) && res.length > 1) {\n      return _.map(res, (value, index) => {\n        return {\n          value: value.toString(),\n          type: outputs[index].type ? outputs[index].type : '',\n          name: outputs[index].name ? outputs[index].name : '',\n        }\n      })\n    }\n    return []\n  }\n\n  const handleSubmit = async (abi, v, cb) => {\n    try {\n      if (abi.stateMutability === 'view') {\n        console.info(v)\n        let res = await instance.functions[abi.name].call(this, ...v)\n        cb({outputs: parseOutput(res, abi.outputs)})\n      } else {\n        let data = instance.interface.functions[abi.name].encode(v)\n        let tx = Object.assign({data, to: instance.address}, txMeta, {from: currentAccount})\n        let txHash = await ethSendTransaction(tx)\n        let res = await getTransactionReceiptLoop(txHash)\n  \n        if (res) {\n          if (res.status === '0x1') {\n            cb()\n          } else if (res.status == '0x0') {\n            cb({errorMsg: new Error(res.vmerr)})\n          }\n        }\n      } \n    } catch (error) {\n      console.error(error)\n      cb({errorMsg: error})\n    }\n  }\n\n  return (\n    <div className={showFuncs ? 'contractPannel' : ''}>\n      <Row className=\"row\">\n        <Col className=\"contractCol\">\n          {contract.name} at({`${instance.address.substr(0, 6)}....${instance.address.substr(-8)}`})\n          <span style={{float: \"right\"}}>\n            { \n              showFuncs ? \n              <UpOutlined style={{paddingLeft: \"10px\"}} onClick={() => setShowFuncs(!showFuncs)}/> : \n              <DownOutlined style={{paddingLeft: \"10px\"}} onClick={() => {setShowFuncs(!showFuncs)}}/> \n            }\n            <CopyOutlined style={{paddingLeft: \"10px\"}} onClick={handleCopy} />\n            <CloseCircleOutlined style={{paddingLeft: \"10px\"}} onClick={() => {dispatch(deleteContract(instance.address))}}/>\n          </span>\n        </Col>\n      </Row>\n      {\n        showFuncs &&\n        _.filter(instance.interface.abi, el => el.type == 'function').map((abi, index) => (\n          <MethodInput key={index} abi={abi} onSubmit={(v, cb) => handleSubmit(abi, v, cb)}/>\n        ))\n      }\n    </div >\n  )\n}\n\n","import React, { useState, useEffect } from 'react'\nimport { Select, Button, Row, Col, Input } from 'antd'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { LoadingOutlined, DeleteOutlined } from '@ant-design/icons'\nimport { MethodInput, Contract } from '../contract/Contract'\nimport _ from 'underscore'\nimport { deployContract, clearContracts, setContract } from './DeploySlice'\n\nexport default () => {\n\n  const dispatch = useDispatch()\n  const { compilation, deployInfo, contracts } = useSelector(state => state.deploy)\n  const [ selected, setSelected ] = useState('')\n  const [ constructorFunc, setConstructorFunc ] = useState(false)\n  const [ atValue, setAtValue ] = useState('')\n\n  useEffect(() => {\n    if (compilation && compilation.length > 0) {\n      setSelected(compilation[0])\n    }\n  }, [compilation])\n\n  useEffect(() => {\n    let constructorFunc = _.find(selected.abi, el => el.type === 'constructor')\n    setConstructorFunc(constructorFunc)\n  }, [selected])\n\n  const handleSelect = (v) => {\n    let selectedItem = _.find(compilation, (el) => el.name === v)\n\n    if (selectedItem) {\n      setSelected(selectedItem)\n    }\n  }\n\n  const handleDeploy = (v, cb) => {\n    dispatch(deployContract(selected, v)).then(() => {\n      cb({errorMsg: deployInfo.errorMsg})\n    })\n  }\n\n  const handleAttach = () => {\n    dispatch(setContract({\n      address: atValue,\n      ...selected\n    }))\n  }\n\n  return (\n    <div>\n      Compiled contracts:\n      <Select\n        style={{ width: \"100%\", marginBottom: \"5px\"}}\n        value={selected.name}\n        onChange={handleSelect}>\n        {\n          compilation && compilation.length > 0 &&\n          compilation.map(compiled => (\n            <Select.Option value={compiled.name} key={compiled.name}>{compiled.name}</Select.Option>\n          ))\n        }\n      </Select>\n      <Row gutter={[16, 5]} >\n        <Col>\n          {\n            constructorFunc ? \n              <MethodInput abi={constructorFunc} onSubmit={(v, cb) => {handleDeploy(v, cb)}}/> : \n              <Button type=\"primary\" onClick={() => dispatch(deployContract(selected))}>\n                { deployInfo.status === 'deploying' && <LoadingOutlined /> } Deploy\n              </Button>\n          }\n        </Col>\n        <Col>Or</Col>\n        <Col span={4}>\n          <Button onClick={handleAttach}>At</Button>\n        </Col>\n        <Col span={20}>\n          <Input placeholder=\"deployed contract address\" value={atValue} onChange={e => setAtValue(e.target.value)} />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"errorColor\">{deployInfo.errorMsg}</Col>\n      </Row>\n      {\n        contracts && Object.keys(contracts).length > 0 && \n        <>\n          <Row className=\"row\">\n            <Col>\n              <span>Deployed contracts:</span>\n              <span style={{float: \"right\"}}>\n                <DeleteOutlined onClick={() => {dispatch(clearContracts())}}/>\n              </span>\n            </Col>\n          </Row>\n          {\n            Object.keys(contracts).map(address => (\n              <Contract key={address} contract={contracts[address]} />\n            ))\n          }\n        </>\n      }\n    </div>\n  )\n}\n\n","import React from 'react';\r\nimport Lkconnect from './components/lkconnect/Lkconnect';\r\nimport Accounts from './components/accounts/Accounts';\r\nimport Deploy from './components/deploy/Deploy';\r\nimport './App.css';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction App() {\r\n  const { isConnect }= useSelector(state => state.lkconnect)\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <Lkconnect />\r\n      {\r\n        isConnect ? \r\n        <>\r\n          <Accounts />\r\n          <Deploy />\r\n        </>: ''\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\nimport { ethSendTransaction, getTransactionReceipt } from '../../api'\n\nexport const slice = createSlice({\n  name: 'contract',\n  initialState: {\n    contracts: {}\n  },\n  reducers: {\n    setContract: (state, action) => {\n      state.contracts[action.payload.address] = action.payload.contract\n    },\n    deleteContract: (state, action) => {\n      delete state.contracts[action.payload]\n    },\n    clearContracts: (state) => {\n      state.contracts = {}\n    }\n  }\n})\n\nexport const { setContract, deleteContract, clearContracts } = slice.actions\n\nexport const sendTransaction = (txParams) => async (dispatch, getState) => {\n  let { accounts } = getState()\n  let { currentAccount, txMeta } = accounts\n  \n  try {\n    let tx = Object.assign(txParams, txMeta, {from: currentAccount})\n    let txHash = await ethSendTransaction(tx)\n    let getContractReceiptTimer, timerN = 0  \n\n    getContractReceiptTimer = setInterval(() => {\n      timerN ++\n      if (timerN > 10) {\n        clearInterval(getContractReceiptTimer)\n        throw new Error('Get transaction time out!')\n      }\n\n      getTransactionReceipt(txHash).then(res => {\n        if (res) {\n          clearInterval(getContractReceiptTimer)\n          if (res.status === '0x0') {\n            throw new Error(res.vmerr)\n          }\n        }\n      })\n    }, 500)\n  } catch (error) {\n\n  }\n}\n\nexport default slice.reducer","import { configureStore } from '@reduxjs/toolkit'\r\nimport lkconnectReducer from '../components/lkconnect/lkconnectSlice'\r\nimport accountsReducer from '../components/accounts/AccountsSlice'\r\nimport deployReducer from '../components/deploy/DeploySlice'\r\nimport contractReducer from '../components/contract/ContractSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    lkconnect: lkconnectReducer,\r\n    accounts: accountsReducer,\r\n    deploy: deployReducer,\r\n    contract: contractReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createIframeClient } from '@remixproject/plugin'\r\nimport { addCompilation } from './components/deploy/DeploySlice'\r\n\r\nconst client = createIframeClient()\r\n\r\nclient.onload(async () => {\r\n  ReactDOM.render(\r\n    <Provider store={store}>\r\n      <App client={client}/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n  )\r\n\r\n  let compiled = await client.solidity.getCompilationResult()\r\n\r\n  if (compiled && compiled.data) {\r\n    store.dispatch(addCompilation(compiled))\r\n  }\r\n\r\n  client.on('solidity', 'compilationFinished', (fileName, source, version, data) => {\r\n    store.dispatch(addCompilation({data, source}))\r\n  })\r\n})\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}